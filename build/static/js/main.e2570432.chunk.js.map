{"version":3,"sources":["Header.js","request.js","Nav.js","VideoCard.js","axios.js","Results.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","src","API_KEY","fetchTrending","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchMystery","fetchSciFi","fetchWestern","fetchAnimation","fetchTV","Nav","setselectedOption","onClick","requests","VideoCard","forwardRef","ref","movie","backdrop_path","poster_path","alt","line","element","truncateText","text","overview","title","original_name","media_type","release_date","first_air_date","ThumbUpSharp","vote_count","instance","axios","create","baseURL","Results","selectedOption","useState","movies","setMovies","useEffect","a","get","request","data","results","fetchData","map","key","id","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e2570432.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Header.css\";\nimport HomeIcon from \"@material-ui/icons/Home\";\nimport FlashOnIcon from \"@material-ui/icons/FlashOn\";\nimport LiveTvIcon from \"@material-ui/icons/LiveTv\";\nimport VideoLibraryIcon from \"@material-ui/icons/VideoLibrary\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport PersonOutlineIcon from \"@material-ui/icons/PersonOutline\";\n\nfunction Header() {\n  return (\n    <div className=\"header\">\n      <div className=\"header__icons\">\n        <div className=\"header__icon header__icon--active\">\n          <HomeIcon />\n          <p>Home</p>\n        </div>\n        <div className=\"header__icon\">\n          <FlashOnIcon />\n          <p>Trending</p>\n        </div>\n        <div className=\"header__icon\">\n          <LiveTvIcon />\n          <p>Verified</p>\n        </div>\n        <div className=\"header__icon\">\n          <VideoLibraryIcon />\n          <p>Collection</p>\n        </div>\n        <div className=\"header__icon\">\n          <SearchIcon />\n          <p>Search</p>\n        </div>\n\n        <div className=\"header__icon\">\n          <PersonOutlineIcon />\n          <p>Account</p>\n        </div>\n      </div>\n      <img src=\"https://press.hulu.com/wp-content/uploads/2020/02/hulu-white.png\" />\n    </div>\n  );\n}\n\nexport default Header;\n","const API_KEY = 'd70c6fef4acf7b365727903e8d675a66';\n\nexport default {\n  fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\n  fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\n  fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\n  fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\n  fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\n  fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\n  fetchMystery: `/discover/movie?api_key=${API_KEY}&with_genres=9648`,\n  fetchSciFi: `/discover/movie?api_key=${API_KEY}&with_genres=878`,\n  fetchWestern: `/discover/movie?api_key=${API_KEY}&with_genres=37`,\n  fetchAnimation: `/discover/movie?api_key=${API_KEY}&with_genres=16`,\n  fetchTV: `/discover/movie?api_key=${API_KEY}&with_genres=10770`,\n};\n","import React from \"react\";\nimport \"./Nav.css\";\nimport requests from \"./request\";\n\nfunction Nav({ setselectedOption }) {\n  return (\n    <div className=\"nav\">\n      <h2 onClick={() => setselectedOption(requests.fetchTrending)}>\n        Trending\n      </h2>\n      <h2 onClick={() => setselectedOption(requests.fetchTopRated)}>\n        Top Rated\n      </h2>\n      <h2 onClick={() => setselectedOption(requests.fetchActionMovies)}>\n        Action\n      </h2>\n      <h2 onClick={() => setselectedOption(requests.fetchComedyMovies)}>\n        Comedy\n      </h2>\n      <h2 onClick={() => setselectedOption(requests.fetchHorrorMovies)}>\n        Horror\n      </h2>\n      <h2 onClick={() => setselectedOption(requests.fetchRomanceMovies)}>\n        Romance\n      </h2>\n      <h2 onClick={() => setselectedOption(requests.fetchMystery)}>Mystery</h2>\n      <h2 onClick={() => setselectedOption(requests.fetchSciFi)}>Sci-fi</h2>\n      <h2 onClick={() => setselectedOption(requests.fetchWestern)}>Western</h2>\n      <h2 onClick={() => setselectedOption(requests.fetchAnimation)}>\n        Animation\n      </h2>\n      <h2 onClick={() => setselectedOption(requests.fetchTV)}>TV Movie</h2>\n    </div>\n  );\n}\n\nexport default Nav;\n","import React, { forwardRef } from \"react\";\nimport \"./VideoCard.css\";\nimport TextTruncate from \"react-text-truncate\";\nimport { ThumbUpSharp } from \"@material-ui/icons\";\n\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\nconst  VideoCard= forwardRef(({ movie },ref) => {\n  return (\n\n    <div ref={ref} className=\"videoCard\">\n      <img\n        src={`${base_url}${movie.backdrop_path || movie.poster_path}`}\n        alt=\"movie poster\"\n      />\n      <TextTruncate\n        line={1}\n        element=\"p\"\n        truncateText=\"...\"\n        // textTruncateChild={<a href={movie.id}>Read More</a>}\n        text={movie.overview}\n      />\n      {/* or */}\n      {/* <p>{movie.overview}</p> */}\n      <h2>{movie.title || movie.original_name}</h2>\n      <p className=\"videoCard__stats\">\n        {movie.media_type && `${movie.media_type} .`}\n        {movie.release_date || movie.first_air_date} .\n        <ThumbUpSharp /> {\" \"}\n        {movie.vote_count}\n      </p>\n    </div>\n  );\n});\n\nexport default VideoCard;\n"," import axios from 'axios';\n//  base url to make requests to the movie database \n\n\nconst instance = axios.create({\n    baseURL:\"https://api.themoviedb.org/3\",\n\n});\n\nexport default instance;","import React, { useState, useEffect } from \"react\";\nimport VideoCard from \"./VideoCard\";\nimport \"./Results.css\";\nimport axios from \"./axios\";\nimport FlipMove from \"react-flip-move\";\nfunction Results({ selectedOption }) {\n  // const [movies,setMovies] =useState([\"1\",\"2\"]);//give the 2 result\n  const [movies, setMovies] = useState([]);\n\n  useEffect(() => {\n    //runs this code once when the results component loads/mounts\n    async function fetchData() {\n      const request = await axios.get(selectedOption);\n      setMovies(request.data.results);\n      return request;\n    }\n    fetchData();\n  }, [selectedOption]);\n\n  return (\n    <div className=\"results\">\n      <FlipMove>\n        {movies.map((movie) => (\n          <VideoCard key={movie.id} movie={movie} />\n        ))}\n      </FlipMove>\n    </div>\n  );\n}\n\nexport default Results;\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Header from \"./Header\";\nimport Nav from \"./Nav\";\nimport Results from \"./Results\";\nimport requests from \"./request\";\n\nfunction App() {\n  const [selectedOption, setselectedOption] = useState(requests.fetchTrending);\n  return (\n    <div className=\"app\">\n      <Header />\n      {/* there is a modifier pass in nav option */}\n      <Nav setselectedOption={setselectedOption} />\n      <Results selectedOption={selectedOption} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}